package main

import (
	drpdelta "drp-delta/src"
	"encoding/csv"
	"fmt"
	"math/rand"
	"os"
	"strconv"
	"time"
)

func main() {

	file, err := os.Create("chain" + time.Now().Format("20060102150405") + ".csv")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	numPylons := 1
	pylonLength := 16
	numTxns := 64

	writer.Write([]string{"Benchmark parameters: chain(length=" + strconv.Itoa(pylonLength) + ", numTxns=" + strconv.Itoa(numTxns) + ")"})
	writer.Write([]string{"mode", "numClients", "trial", "duration"})
	for mode := lockModeFast; mode == lockModeFast || mode == lockModeSlow; mode++ {
		for numClients := 1; numClients <= numPylons*2; numClients++ {
			for trial := 0; trial < 64; trial++ {
				fmt.Println(mode, numClients, trial)
				duration := cross(numPylons, pylonLength, numTxns, numClients, mode)
				writer.Write([]string{strconv.Itoa(int(mode)), strconv.Itoa(numClients), strconv.Itoa(trial), strconv.FormatInt(duration.Microseconds(), 10)})
			}
			writer.Flush()
		}
	}

	//manyVars(50, 100, 5, lockModeSlow)
	//cross(20, 7, 19, 78, lockModeSlow)
	//manyDefs(1, 100, 10, lockModeSlow)

	/*o := drpdelta.NewOrchestrator()

	x := o.NewVariable("x", 0)
	y := o.NewVariable("y", 0)
	z := o.NewDefinition("z", []drpdelta.ReactiveNode{x, y}, func(m map[drpdelta.Address]any) any {
		return m["x"].(int) + m["y"].(int)
	})
	go z.Run()
	go y.Run()
	go x.Run()
	zVal := o.NewInspector(z)

	go o.DoAction(drpdelta.Action{
		Targets: map[drpdelta.Address]drpdelta.LockKind{
			(x.Address()): drpdelta.LockKindWrite,
		},
		F: func(m map[drpdelta.Address]any) map[drpdelta.Address]any {
			return map[drpdelta.Address]any{
				(x.Address()): m[x.Address()].(int) + 1,
			}
		},
	})

	go o.DoAction(drpdelta.Action{
		Targets: map[drpdelta.Address]drpdelta.LockKind{
			(x.Address()): drpdelta.LockKindWrite,
		},
		F: func(m map[drpdelta.Address]any) map[drpdelta.Address]any {
			return map[drpdelta.Address]any{
				(x.Address()): m[x.Address()].(int) + 1,
			}
		},
	})

	go o.DoAction(drpdelta.Action{
		Targets: map[drpdelta.Address]drpdelta.LockKind{
			(x.Address()): drpdelta.LockKindWrite,
			(y.Address()): drpdelta.LockKindWrite,
		},
		F: func(m map[drpdelta.Address]any) map[drpdelta.Address]any {
			return map[drpdelta.Address]any{
				(x.Address()): m[x.Address()].(int) + 1,
				(y.Address()): m[y.Address()].(int) + 1,
			}
		},
	})

	go o.DoAction(drpdelta.Action{
		Targets: map[drpdelta.Address]drpdelta.LockKind{
			(x.Address()): drpdelta.LockKindWrite,
			(y.Address()): drpdelta.LockKindWrite,
		},
		F: func(m map[drpdelta.Address]any) map[drpdelta.Address]any {
			return map[drpdelta.Address]any{
				(x.Address()): m[x.Address()].(int) + 1,
				(y.Address()): m[y.Address()].(int) + 1,
			}
		},
	})

	for val := range zVal.Values {
		fmt.Println("New value from z:", val)
	}*/
}

// numNodes and numTxns are powers of 2
func manyVars(numVars int, numTxns int, numClients int, mode lockMode) time.Duration {
	o := drpdelta.NewOrchestrator()

	vars := make([]drpdelta.ReactiveNode, 0, numVars)
	for i := 0; i < numVars; i++ {
		vars = append(vars, o.NewVariable(drpdelta.Address("var-"+strconv.Itoa(i)), 0))
	}
	def := o.NewDefinition("def", vars, func(m map[drpdelta.Address]any) any {
		sum := 0
		for _, val := range m {
			sum += val.(int)
		}
		return sum
	})
	ins := o.NewInspector(def)

	expectedSum := 0
	actions := []drpdelta.Action{}

	for i := 0; i < numTxns; i++ {
		targets := map[drpdelta.Address]drpdelta.LockKind{}

		var writeTarget drpdelta.Address
		if mode == lockModeFast {
			numTargets := 1 + rand.Int()%len(vars)

			for target := 0; target < numTargets; target++ {
				for {
					address := vars[rand.Int()%len(vars)].Address()
					if _, found := targets[address]; !found {
						if target == 0 {
							writeTarget = address
							targets[address] = drpdelta.LockKindWrite
						} else {
							targets[address] = drpdelta.LockKindRead
						}
						break
					}
				}
			}
		} else {
			writeJ := rand.Int() % len(vars)
			for j, var_ := range vars {
				if j == writeJ {
					writeTarget = var_.Address()
					targets[var_.Address()] = drpdelta.LockKindWrite
				} else {
					targets[var_.Address()] = drpdelta.LockKindRead
				}
			}
		}

		expectedSum += 1
		actions = append(actions, drpdelta.Action{
			Targets: targets,
			F: func(m map[drpdelta.Address]any) map[drpdelta.Address]any {
				return map[drpdelta.Address]any{
					(writeTarget): m[writeTarget].(int) + 1,
				}
			},
		})
	}

	for _, var_ := range vars {
		go var_.Run()
	}
	go def.Run()

	rand.Shuffle(len(actions), func(i, j int) {
		actions[i], actions[j] = actions[j], actions[i]
	})

	start := time.Now()

	step := len(actions) / numClients
	if step == 0 {
		step = 1
	}
	for lo := 0; lo < len(actions); lo += step {
		lo := lo
		hi := lo + step
		if hi > len(actions) {
			hi = len(actions)
		}
		go func() {
			for _, action := range actions[lo:hi] {
				o.DoAction(action)
			}
		}()
	}

	for val := range ins.Values {
		if val == expectedSum {
			break
		}
	}

	return time.Since(start)
}

// numNodes and numTxns are powers of 2
func cross(numPylons int, pylonLength int, numTxns int, numClients int, mode lockMode) time.Duration {
	o := drpdelta.NewOrchestrator()

	vars := make([]drpdelta.ReactiveNode, 0, numPylons)
	for i := 0; i < numPylons; i++ {
		vars = append(vars, o.NewVariable(drpdelta.Address("var-"+strconv.Itoa(i)), 0))
	}

	nodes := [][]drpdelta.ReactiveNode{vars}
	for i := 1; i <= pylonLength; i++ {
		nodes = append(nodes, []drpdelta.ReactiveNode{})
		for j := 0; j < numPylons; j++ {
			address := drpdelta.Address("def-" + strconv.Itoa(i) + "-" + strconv.Itoa(j))
			deps := []drpdelta.ReactiveNode{}

			if j != 0 {
				deps = append(deps, nodes[i-1][j-1])
			}
			deps = append(deps, nodes[i-1][j])
			if j != numPylons-1 {
				deps = append(deps, nodes[i-1][j+1])
			}

			nodeBelowAddress := nodes[i-1][j].Address()

			nodes[i] = append(nodes[i], o.NewDefinition(address, deps, func(m map[drpdelta.Address]any) any { return m[nodeBelowAddress] }))
		}
	}
	ins := []drpdelta.Inspector{}
	for j := 0; j < numPylons; j++ {
		ins = append(ins, *o.NewInspector(nodes[pylonLength][j]))
	}

	expectedSum := make([]int, numPylons)
	actions := []drpdelta.Action{}

	for txIdx := 0; txIdx < numTxns; txIdx++ {
		targets := map[drpdelta.Address]drpdelta.LockKind{}

		var writePylon int
		var writeTarget drpdelta.Address
		if mode == lockModeFast {
			numTargets := 1 + rand.Int()%len(vars)

			for target := 0; target < numTargets; target++ {
				for {
					pylon := rand.Int() % len(vars)
					address := vars[pylon].Address()
					if _, found := targets[address]; !found {
						if target == 0 {
							writePylon = pylon
							writeTarget = address
							targets[address] = drpdelta.LockKindWrite
						} else {
							targets[address] = drpdelta.LockKindRead
						}
						break
					}
				}
			}
		} else {
			writeJ := rand.Int() % len(vars)
			for j, var_ := range vars {
				if j == writeJ {
					writePylon = writeJ
					writeTarget = var_.Address()
					targets[var_.Address()] = drpdelta.LockKindWrite
				} else {
					targets[var_.Address()] = drpdelta.LockKindRead
				}
			}
		}

		expectedSum[writePylon] += 1
		actions = append(actions, drpdelta.Action{
			Targets: targets,
			F: func(m map[drpdelta.Address]any) map[drpdelta.Address]any {
				return map[drpdelta.Address]any{
					(writeTarget): m[writeTarget].(int) + 1,
				}
			},
		})
	}

	for _, row := range nodes {
		for _, node := range row {
			go node.Run()
		}
	}

	rand.Shuffle(len(actions), func(i, j int) {
		actions[i], actions[j] = actions[j], actions[i]
	})

	start := time.Now()

	step := len(actions) / numClients
	if step == 0 {
		step = 1
	}
	for lo := 0; lo < len(actions); lo += step {
		lo := lo
		hi := lo + step
		if hi > len(actions) {
			hi = len(actions)
		}
		go func() {
			for _, action := range actions[lo:hi] {
				o.DoAction(action)
			}
		}()
	}

	for i, ins := range ins {
		for val := range ins.Values {
			if val == expectedSum[i] {
				break
			}
		}
	}

	return time.Since(start)
}

// numNodes and numTxns are powers of 2
func manyDefs(numDefs int, numTxns int, numClients int, mode lockMode) time.Duration {
	o := drpdelta.NewOrchestrator()

	var_ := o.NewVariable(drpdelta.Address("var"), 0)
	defs := make([]drpdelta.ReactiveNode, 0, numDefs)
	ins := make([]drpdelta.Inspector, 0, numDefs)
	for i := 0; i < numDefs; i++ {
		defs = append(defs, o.NewDefinition(drpdelta.Address("def"+strconv.Itoa(i)), []drpdelta.ReactiveNode{var_}, func(m map[drpdelta.Address]any) any { return m[var_.Address()] }))
		ins = append(ins, *o.NewInspector(defs[i]))
	}

	expectedSum := 0
	actions := []drpdelta.Action{}

	for txIdx := 0; txIdx < numTxns; txIdx++ {
		targets := map[drpdelta.Address]drpdelta.LockKind{(var_.Address()): drpdelta.LockKindWrite}

		expectedSum += 1
		actions = append(actions, drpdelta.Action{
			Targets: targets,
			F: func(m map[drpdelta.Address]any) map[drpdelta.Address]any {
				return map[drpdelta.Address]any{
					(var_.Address()): m[var_.Address()].(int) + 1,
				}
			},
		})
	}

	go var_.Run()
	for _, def := range defs {
		go def.Run()
	}

	rand.Shuffle(len(actions), func(i, j int) {
		actions[i], actions[j] = actions[j], actions[i]
	})

	start := time.Now()

	step := len(actions) / numClients
	if step == 0 {
		step = 1
	}
	for lo := 0; lo < len(actions); lo += step {
		lo := lo
		hi := lo + step
		if hi > len(actions) {
			hi = len(actions)
		}
		go func() {
			for _, action := range actions[lo:hi] {
				o.DoAction(action)
			}
		}()
	}

	for _, ins := range ins {
		for val := range ins.Values {
			if val == expectedSum {
				break
			}
		}
	}

	return time.Since(start)
}

type lockMode int

const (
	lockModeFast lockMode = iota
	lockModeSlow
)
